/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pcd.gui;

import hu.kazocsaba.imageviewer.ImageMouseClickListener;
import hu.kazocsaba.imageviewer.ImageMouseMotionListener;
import hu.kazocsaba.imageviewer.ImageViewer;
import hu.kazocsaba.imageviewer.ResizeStrategy;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.apache.commons.lang3.Range;
import pcd.data.ImageProcess;
import pcd.data.PcdPoint;
import pcd.gui.base.ImgFileFilter;
import pcd.gui.base.PCDClickListener;
import pcd.gui.base.PCDMoveListener;
import pcd.gui.base.TableComboBoxEditor;
import pcd.gui.base.TableComboBoxRenderer;
import pcd.gui.dialog.FileListPopup;

/**
 *
 * @author ixenr
 */
public class MainFrame extends javax.swing.JFrame {
    
    private final ImageProcess imgProc;
    private final ImageViewer imagePane;
    private boolean hasOverlay = false;
    private final JComponent imagePaneComponent;
    private final DefaultListModel fileListModel = new DefaultListModel();
    private final ImgFileFilter filter = new ImgFileFilter();
    
    private static final double DEFAULT_ZOOM = 0.2234;
    private static final double ZOOM_DIFF = (1.0 - DEFAULT_ZOOM) / 3;
    
    public MainFrame(ImageProcess imgProc) {
        this.imgProc = imgProc;
        imgProc.setFrame(this);
        
        //imgProc.addImage("1.png");
        
        imagePane = new ImageViewer(null, false);
        imagePaneComponent = imagePane.getComponent();
        imagePane.setResizeStrategy(ResizeStrategy.CUSTOM_ZOOM);
        imagePane.setZoomFactor(DEFAULT_ZOOM);
        //imagePane.setImage(imgProc.getImageObject(0));
        ImageMouseClickListener mouseListenerClick = new PCDClickListener(this, imgProc);
        ImageMouseMotionListener mouseListenerMotion = new PCDMoveListener(this, imgProc);
        imagePane.addImageMouseClickListener(mouseListenerClick);
        imagePane.addImageMouseMotionListener(mouseListenerMotion);
        
        initComponents();
        
        opacitySlider.setEnabled(false);
        
    }
    
    public String getNewClickType(){
        return (String) pointAddTypeSelect.getSelectedItem();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        fileTree = new javax.swing.JTree();
        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tagTable = new TypeTable(imgProc);
        interactionPanel = new javax.swing.JPanel();
        imagePanel = new javax.swing.JPanel();
        tagPanel = new javax.swing.JLayeredPane();
        inferButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        pointAddTypeSelect = new javax.swing.JComboBox<>();
        opacitySlider = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        interactiveModeButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        exportAllButton = new javax.swing.JButton();
        openFilesButton = new javax.swing.JButton();
        exportMergeButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tagCountTable = new javax.swing.JTable();
        zoomInButton = new javax.swing.JButton();
        zoomOutButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList<>();
        mainBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        jScrollPane2.setViewportView(fileTree);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Bodoni MT", 0, 14)); // NOI18N
        setMinimumSize(new java.awt.Dimension(1366, 768));
        setName("mainFrame"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(1366, 768));

        tagTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        tagTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "colPoint", "", "Typ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        modifyTable(tagTable);
        tagTable.setColumnSelectionAllowed(true);
        tagTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tagTable);
        tagTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tagTable.getColumnModel().getColumnCount() > 0) {
            tagTable.getColumnModel().getColumn(0).setResizable(false);
            tagTable.getColumnModel().getColumn(1).setResizable(false);
            tagTable.getColumnModel().getColumn(1).setPreferredWidth(13);
            tagTable.getColumnModel().getColumn(2).setResizable(false);
            tagTable.getColumnModel().getColumn(2).setPreferredWidth(170);
        }
        tagTable.getColumnModel().getColumn(0).setMinWidth(0);
        tagTable.getColumnModel().getColumn(0).setMaxWidth(0);

        interactionPanel.setBackground(new java.awt.Color(204, 204, 204));
        interactionPanel.setMinimumSize(new java.awt.Dimension(825, 647));
        interactionPanel.setPreferredSize(new java.awt.Dimension(825, 647));
        interactionPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        imagePanel.setBackground(new java.awt.Color(153, 153, 153));
        imagePanel.setMinimumSize(new java.awt.Dimension(825, 600));
        imagePanel.setPreferredSize(new java.awt.Dimension(825, 600));
        imagePanel.setLayout(new java.awt.GridLayout(1, 0));

        imagePanel.add(imagePaneComponent);

        interactionPanel.add(imagePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 825, 600));

        javax.swing.GroupLayout tagPanelLayout = new javax.swing.GroupLayout(tagPanel);
        tagPanel.setLayout(tagPanelLayout);
        tagPanelLayout.setHorizontalGroup(
            tagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 825, Short.MAX_VALUE)
        );
        tagPanelLayout.setVerticalGroup(
            tagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        interactionPanel.add(tagPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        inferButton.setText("Vyhodnotit snimek");
        inferButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inferButtonActionPerformed(evt);
            }
        });
        interactionPanel.add(inferButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(676, 610, 140, 30));
        inferButton.setEnabled(false);

        jLabel1.setText("Typ pridaneho bodu: ");
        interactionPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 610, -1, 30));

        ArrayList<String> arr = imgProc.getTypeConfigList();
        String[] array = arr.toArray(new String[arr.size()]);
        pointAddTypeSelect.setModel(new javax.swing.DefaultComboBoxModel<>(array));
        interactionPanel.add(pointAddTypeSelect, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 610, 160, 30));

        opacitySlider.setBackground(new java.awt.Color(204, 204, 204));
        opacitySlider.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        opacitySlider.setForeground(new java.awt.Color(255, 102, 51));
        opacitySlider.setMajorTickSpacing(10);
        opacitySlider.setMinorTickSpacing(10);
        opacitySlider.setPaintTicks(true);
        opacitySlider.setSnapToTicks(true);
        opacitySlider.setValue(100);
        opacitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                opacitySliderStateChanged(evt);
            }
        });
        interactionPanel.add(opacitySlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 611, -1, 30));

        jLabel2.setText("Viditelnost bodu:");
        interactionPanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 610, -1, 30));

        interactiveModeButton.setText("Interaktivni mod");

        exportButton.setText("Export do CSV");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        exportAllButton.setText("Exportovat vse do CSV");

        openFilesButton.setText("Otevrit soubory");
        openFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFilesButtonActionPerformed(evt);
            }
        });

        exportMergeButton.setText("Spojit s CSV");

        tagCountTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        tagCountTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Pocet"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tagCountTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tagCountTable);
        tagCountTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tagCountTable.getColumnModel().getColumnCount() > 0) {
            tagCountTable.getColumnModel().getColumn(0).setPreferredWidth(15);
            tagCountTable.getColumnModel().getColumn(1).setPreferredWidth(170);
        }

        zoomInButton.setText("Zoom In");
        zoomInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInButtonActionPerformed(evt);
            }
        });

        zoomOutButton.setText("Zoom Out");
        zoomOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutButtonActionPerformed(evt);
            }
        });

        fileList.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        fileList.setModel(fileListModel);
        fileList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileListMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(fileList);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(zoomInButton)
                        .addGap(70, 70, 70)
                        .addComponent(zoomOutButton)
                        .addGap(511, 511, 511))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                            .addComponent(openFilesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(interactionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(interactiveModeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(exportButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(exportAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                            .addComponent(exportMergeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap(54, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zoomInButton)
                    .addComponent(zoomOutButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(interactionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(interactiveModeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportAllButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportMergeButton))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openFilesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        interactiveModeButton.setEnabled(false);
        exportButton.setEnabled(false);
        exportMergeButton.setEnabled(false);

        jMenu1.setText("File");
        mainBar.add(jMenu1);

        jMenu2.setText("Edit");
        mainBar.add(jMenu2);

        setJMenuBar(mainBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1382, 807));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_exportButtonActionPerformed

    private void zoomInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInButtonActionPerformed
        double zoom = imagePane.getZoomFactor();
        zoom = Range.between(DEFAULT_ZOOM, 1.0).fit(zoom + ZOOM_DIFF);
        imagePane.setZoomFactor(zoom);
    }//GEN-LAST:event_zoomInButtonActionPerformed

    private void zoomOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutButtonActionPerformed
        double zoom = imagePane.getZoomFactor();
        zoom = Range.between(DEFAULT_ZOOM, 1.0).fit(zoom - ZOOM_DIFF);
        imagePane.setZoomFactor(zoom);
    }//GEN-LAST:event_zoomOutButtonActionPerformed

    private void openFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFilesButtonActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(true);
        fc.setAcceptAllFileFilterUsed(false);
        fc.addChoosableFileFilter(filter);
        int returnVal = fc.showOpenDialog(this);
        
        boolean one = false;
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File[] files = fc.getSelectedFiles();
            ArrayList<File> failedList = new ArrayList<>();
            
            for (File file : files) {
                try {
                    if (imgProc.checkOpened(file)) {
                        continue;
                    }
                    
                    imgProc.addImage(file.getAbsolutePath());
                    fileListModel.addElement(file.getName());
                    one = true;
                    
                } catch (IOException e) {
                    failedList.add(file);
                }
            }
            
            if (failedList.size() > 0) {
                String failedfiles = "";
                failedfiles = failedList.stream().map(file -> file.getName() + ", ").reduce(failedfiles, String::concat);
                failedfiles = failedfiles.substring(0, failedfiles.length() - 3);
                JOptionPane.showMessageDialog(this, "Nasledujici snimky se nepodarilo otevrit: " + failedfiles, "Zlyhani", JOptionPane.WARNING_MESSAGE);
            }
            
        }
        
//        if(one){
//            if(hasOverlay){
//                imagePane.removeOverlay(imgProc.getOverlay());
//                hasOverlay = false;
//            }
//            imagePane.setImage(imgProc.getImageObject());
//            inferButton.setEnabled(true);
//        }

    }//GEN-LAST:event_openFilesButtonActionPerformed

    private void fileListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileListMouseClicked
        if (SwingUtilities.isLeftMouseButton(evt)) {
            int selected = fileList.getSelectedIndex();
            
            if (selected == -1) {
                return;
            }
            
            if(hasOverlay){
                imagePane.removeOverlay(imgProc.getOverlay());
                hasOverlay = false;
            }
            
            imagePane.setImage(imgProc.getImageObject(selected));
            opacitySlider.setValue(100);
            
            if(imgProc.isInitialized()){
                opacitySlider.setEnabled(true);
                inferButton.setEnabled(false);
                imagePane.addOverlay(imgProc.getOverlay(), 1);
                hasOverlay = true;
                loadTables();
            } else {
                opacitySlider.setEnabled(false);
                inferButton.setEnabled(true);
            }
            
        } else if (SwingUtilities.isRightMouseButton(evt)) {
            FileListPopup pop = new FileListPopup();
            pop.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_fileListMouseClicked

    private void inferButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inferButtonActionPerformed
        boolean success = imgProc.inferImage();
        
        if(success){
            loadTables();
            opacitySlider.setEnabled(true);
            imagePane.addOverlay(imgProc.getOverlay(), 1);
            hasOverlay = true;
            return;
        }
        
        hasOverlay = false;
        
    }//GEN-LAST:event_inferButtonActionPerformed

    private void opacitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_opacitySliderStateChanged
        imgProc.getCurrentImage().setPointsOpacity(opacitySlider.getValue() / 100.f);
    }//GEN-LAST:event_opacitySliderStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportAllButton;
    private javax.swing.JButton exportButton;
    private javax.swing.JButton exportMergeButton;
    private javax.swing.JList<String> fileList;
    private javax.swing.JTree fileTree;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JButton inferButton;
    private javax.swing.JPanel interactionPanel;
    private javax.swing.JButton interactiveModeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JMenuBar mainBar;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JSlider opacitySlider;
    private javax.swing.JButton openFilesButton;
    private javax.swing.JComboBox<String> pointAddTypeSelect;
    private javax.swing.JTable tagCountTable;
    private javax.swing.JLayeredPane tagPanel;
    private javax.swing.JTable tagTable;
    private javax.swing.JButton zoomInButton;
    private javax.swing.JButton zoomOutButton;
    // End of variables declaration//GEN-END:variables

    private void modifyTable(JTable tagTable) {
        DefaultTableModel model = (DefaultTableModel) tagTable.getModel();
        
        TableColumn col = tagTable.getColumnModel().getColumn(1);
        col.setCellEditor(new TableComboBoxEditor(imgProc.getTypeConfigList().toArray(new String[0])));
        col.setCellRenderer(new TableComboBoxRenderer(imgProc.getTypeConfigList().toArray(new String[0])));
    }

    //TODO Implement loading up tables
    public void loadTables() {
        DefaultTableModel pointModel = (DefaultTableModel) tagTable.getModel();
        DefaultTableModel pointCountModel = (DefaultTableModel) tagCountTable.getModel();
        
        ArrayList<PcdPoint> pointList = imgProc.getCurrentImage().getPointList();
        
        pointList.forEach(point -> {
            pointModel.addRow(new Object[]{point, "", new JComboBox(imgProc.getTypeConfigList().toArray(new String[imgProc.getTypeConfigList().size()]))});
        });
        
        for (int i = 0; i < tagTable.getRowCount(); i++) {
            PcdPoint p = (PcdPoint) tagTable.getValueAt(i, 0);
            JComboBox c = (JComboBox) tagTable.getValueAt(i, 2);
            c.setSelectedItem(imgProc.getPointTypeName(p));
            c.addActionListener((ActionEvent e) -> {
                DefaultTableModel pointModel1 = (DefaultTableModel) tagTable.getModel();
                int idx = tagTable.getSelectedRow();
                PcdPoint p1 = (PcdPoint) pointModel1.getValueAt(idx, 0);
                p1.setType(imgProc.getPointIdentifier((String) c.getSelectedItem()));
                imgProc.getCurrentImage().getOverlay().repaint();
            });
        }
    }
}
